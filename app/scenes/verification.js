import { Scenes } from "telegraf";
import { STAGES } from "@configs/scenario";
import { createWizardQuestion } from "@app/scenes/lib/createWizardQuestion";
import { objToStringF } from "@app/lib/objToStringF";
import { removeButtons } from "@app/scenes/lib/removeButtons";

const stepInit = async (ctx) => {
	await ctx.reply(
		"–ü—Ä–∏—Å—ã–ª–∞–π —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—ã–ª —Å–¥–µ–ª–∞–Ω –∑–∞–∫–∞–∑, ‚Äî –Ω–∞–π–¥—É —Ç–µ–±—è –≤ —Å–≤–æ–µ–π –±–∞–∑–µ",
	);
	ctx.wizard.next();
};

const stepConfirm = async (ctx) => {
	ctx.wizard.state["email"] = ctx.message?.text;

	const message = objToStringF(
		{ email: ctx.message?.text },
		"–ü—Ä–æ–≤–µ—Ä—å, –≤—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ?",
	);

	await createWizardQuestion(ctx, {
		question: { text: message },
		answers: [
			{
				text: "–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ",
				data: "success",
			},
			{
				text: "–ò–∑–º–µ–Ω–∏—Ç—å",
				data: "refused",
			},
		],
	});

	ctx.wizard.next();
};

const stepFinish = async (ctx) => {
	await removeButtons(ctx);

	const success = true;

	if (ctx.callbackQuery?.data === "refused") {
		await ctx.scene.leave();

		return ctx.scene.enter(STAGES.verification, {
			payload: ctx.wizard.state?.payload,
		});
	}

	if (success) {
		const payload = {
			id: 1,
			...ctx.wizard.state?.payload,
			email: ctx.wizard.state?.email,
		};

		await ctx.reply("–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ.");

		return ctx.scene.leave();
	} else {
		await ctx.reply("–ß—Ç–æ-—Ç–æ –Ω–µ –≤–∏–∂—É —Ç–≤–æ–π e-mail –≤ –±–∞–∑–µ üôÅ");

		await ctx.scene.leave();

		return ctx.scene.enter(STAGES.registration, { ...ctx.state });
	}
};

export const verification = new Scenes.WizardScene(
	STAGES.verification,
	stepInit,
	stepConfirm,
	stepFinish,
);
