import { Scenes } from "telegraf";

import { STAGES } from "@configs/scenario";

import { removeButtons } from "@app/scenes/lib/removeButtons";

import { baseConfirm } from "@app/scenes/components/baseConfirm";

const stepInit = async (ctx) => {
	await ctx.reply(
		"–ü—Ä–∏—Å—ã–ª–∞–π —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—ã–ª —Å–¥–µ–ª–∞–Ω –∑–∞–∫–∞–∑, ‚Äî –Ω–∞–π–¥—É —Ç–µ–±—è –≤ —Å–≤–æ–µ–π –±–∞–∑–µ",
	);
	ctx.wizard.next();
};

const stepConfirm = baseConfirm("–ü—Ä–æ–≤–µ—Ä—å, –≤—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ?", "email");

const stepFinish = async (ctx) => {
	await removeButtons(ctx);

	if (ctx.callbackQuery?.data === "refused") {
		await ctx.scene.leave();

		return ctx.scene.enter(STAGES.verification, {
			payload: ctx.wizard.state?.payload,
		});
	}

	try {
		/* –¢—É—Ç –≤—ã–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö*/
		const success = true;

		if (success) {
			const payload = {
				id: ctx.from.id,
				...ctx.wizard.state?.payload,
				email: ctx.wizard.state?.email,
			};

			console.log("query to db", payload);

			await ctx.reply(
				"–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ.",
			);

			return ctx.scene.leave();
		}
	} catch (e) {
		await ctx.reply("–ß—Ç–æ-—Ç–æ –Ω–µ –≤–∏–∂—É —Ç–≤–æ–π e-mail –≤ –±–∞–∑–µ üôÅ");

		await ctx.scene.leave();

		return ctx.scene.enter(STAGES.registration, { ...ctx.state });
	}
};

export const verification = new Scenes.WizardScene(
	STAGES.verification,
	stepInit,
	stepConfirm,
	stepFinish,
);
